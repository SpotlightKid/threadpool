Threadpool
**********

:Title: Easy to use object-oriented thread pool framework
:Author: Christopher Arndt
:Version: 1.2
:Date: 2005/10/09

Description
===========

A thread pool is a class that maintains a pool of worker threads to perform
time consuming operations in parallel. It assigns jobs to the threads
by putting them in a work request queue, where they are picked up by the
next available thread. This then performs the requested operation in the
background and puts the results in a another queue.

The thread pool class can then collect the results from all threads from
this queue as soon as they become available or after all threads have
finished their work. It's also possible, to define callbacks to handle
each result as it comes in.

Basic usage
===========

>>> main = TreadPool(poolsize)
>>> requests = makeRequests(some_callable, list_of_args, callback)
>>> [main.putRequests(req) for req in requests]
>>> main.wait()

See the end of the module source code for a longer, annotated usage example.

Documentation
=================

You can view the API documentation, generated by epydoc, here:

http://chrisarndt.de/en/software/python/tp_api/

Download
========

You can download the latest version of this module here:

http://chrisarndt.de/en/software/python/download/threadpool.py

or see the colorized source code:

http://chrisarndt.de/en/software/python/threadpool.py.html

Discussion
==========

The basic concept and some code was taken from the book "Python in a Nutshell" by Alex Martelli, copyright O'Reilly 2003, ISBN 0-596-00188-6, from section 14.5 "Threaded Program Architecture". I wrapped the main program logic in the ThreadPool class, added the WorkRequest class and the callback system and tweaked the code here and there.

There are some other recipes in the Python Cookbook, that serve a similar purpose. This one is distinguished by the following characteristics:

- object-oriented, reusable design

- provides callback mechanism to process results as they are returned from the worker threads

- WorkRequest objects wrap the tasks assigned to the worker threads and allow for easy passing of arbitrary data to the callbacks

- the use of the Queue class solves most locking issues

- all worker threads are daemonic, so they exit when the main programm exits, no need for joining

- threads start running as soon as you create them. No need to start or stop them. You can increase or decrease the pool size at any time, superfluous hreads will just exit when they finish their current task.

- you don't need to keep a reference to a thread after you have assigned the last task to it. You just tell it: "don't come back looking for work, when you're done!"

- threads don't eat up cycles while waiting to be assigned a task, they just block when the task queue is empty.


Due to the parallel nature of threads, you have to keep some things in mind:

- do not use for tasks were threads compete for a single external resource (e.g. a harddisk or stdout)

- if you call ThreadPool.wait() the main thread will block until _all_ results have arrived. If you only want to check for results that are available immediately, use ThreadPool.poll()

Also note:

- the results of the work requests are not stored anywhere. You should provide an appropriate callback if you want to do so.

References
==========

There are several other similar recipes in the Python Cookbook:

- http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/203871
- http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/196618
- http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/302746
